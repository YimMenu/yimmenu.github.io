# configuration file for git-cliff
# see https://github.com/orhun/git-cliff#configuration-file

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## {{ commits[0].author.timestamp | date(format="%Y-%m-%d") }}
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {% if commits | filter(attribute="message") | length != commits | filter(attribute="message", value="") | length %}\
        ### {{ group | upper_first }}
        {% for commit in commits %}\
            {% if commit.message | length > 0 %}\
                - {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/YimMenu/YimMenu/commit/{{ commit.id }}))\
            {% endif %}
        {% endfor %}
    {% endif %}\
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/YimMenu/YimMenu/issues/${2}))"}, # replace issue numbers
    { pattern = '\* (.*)', replace = "${1}"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fea\\(", group = "Features"},
    { message = "^Feat", group = "Features"},
    { message = "^rework", group = "Features"},
    { message = "^wip", group = "Features"},
    { message = "^Rework", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^perf", group = "Features"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^co-authored-by", skip = true},
    { message = "^Co-authored-by", skip = true},
    { message = "^credit", skip = true},
    { message = "^Credit", skip = true},
    { message = "^Merge", skip = true},
    { message = "^merge", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { message = "^remove", group = "Miscellaneous Tasks"},
    { message = "^rename", group = "Miscellaneous Tasks"},
    { message = ".*", group = "Miscellaneous Tasks"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
# tag_pattern = "nightly"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
# ignore_tags = "nightly"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
